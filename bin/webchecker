#!/usr/bin/env php

<?php

require_once(getcwd() . '/vendor/autoload.php');
require_once(getcwd() . '/checks/DagVanDeWeek/DagVanDeWeekBase.php');

use Monolog\Logger;
use Monolog\Handler\StreamHandler;

$files = [];

if (!is_dir(getcwd() . '/checks')) {
    throw new Exception(sprintf(
        'The directory "%s" has to exists and must contain the checker-scripts.',
        getcwd() . '/checks'
    ));
}

$dir = new DirectoryIterator(getcwd() . '/checks');
info($dir);

foreach ($files as $filename) {
    runChecks($filename);
}

function runChecks($filename) {
    global $reader;

    require_once($filename);

    $className = getClassName($filename);

    $class = new $className();

    $log = new Logger('name');
    $log->pushHandler(new StreamHandler($class->logfile . '.log', Logger::INFO));

    $class->setLogger($log);

    $methods = get_class_methods($class);

    foreach ($methods as $method) {
        if (strpos($method, 'check') !== false) {

            $reader = new \DocBlockReader\Reader($class, $method);
            $dataProvider = $reader->getParameter('dataProvider');

            if (!is_null($dataProvider)) {
                $items = call_user_func(array($class, $dataProvider));

                foreach ($items as $item) {
                    echo 'Running: ' . $className . '::' . $method . '[' . implode(';', $item). ']' . "\n";
                    call_user_func_array(array($class,$method), $item);
                }
            } else {
                echo "Running: $className::$method\n";
                call_user_func(array($class,$method));
            }
        }
    }
}

function getClassName($filename) {
    $filename = rtrim($filename, '.php');
    $elements = explode('/', $filename);
    
    $block = [
        'Users',
        'sgrootveld',
        'PhpstormProjects',
        'web-checker'
    ];

    $new = [];
    
    foreach ($elements as $element) {
        if (!in_array($element, $block)) {
            $new[] = ucfirst($element);
        }
    }

    return trim(implode('\\', $new), '\\');
}

function info($dir) {
    global $files;

    foreach ($dir as $fileinfo) {
        if (!$fileinfo->isDot() && !$fileinfo->isDir() && strpos($fileinfo->getRealPath(), 'Checker') !== false) {
            $files[] = $fileinfo->getRealPath();
        } else if (!$fileinfo->isDot() && $fileinfo->isDir()) {
            $dir2 = new DirectoryIterator($fileinfo->getRealPath());
            info($dir2);
        }
    }
}
